var fs=require("fs"),path=require("path"),vm=require("vm"),long=require("long"),tape=require("tape"),distPath=path.join(__dirname,"..","..","dist");[{name:"full",data:fs.readFileSync(path.join(distPath,"protobuf.min.js")).toString("utf8")},{name:"light",data:fs.readFileSync(path.join(distPath,"light/protobuf.min.js")).toString("utf8")},{name:"minimal",data:fs.readFileSync(path.join(distPath,"minimal/protobuf.min.js")).toString("utf8")}].forEach(function(o){tape.test(o.name+" build",function(t){t.test(t.name+" - script tags",function(t){var n,a={Long:long};vm.runInNewContext(o.data,n={window:{dcodeIO:a},dcodeIO:a}),t.ok(n.window.protobuf,"should load the library as a global"),t.ok(n.window.protobuf.util.Long,"should load long.js to util"),t.end()}),t.test(t.name+" - webworkers",function(t){var n,a={Long:long};vm.runInNewContext(o.data,n={self:{dcodeIO:a},dcodeIO:a}),t.ok(n.self.protobuf,"should load the library as a global"),t.ok(n.self.protobuf.util.Long,"should load long.js to util"),t.end()}),t.test(t.name+" - amd loaders",function(t){function n(o,n){t.same(o,["long"],"should request long.js as a dependency"),t.notOk(a.window.protobuf.util.Long,"should not have loaded long.js before calling the factory function"),n(long),t.ok(a.window.protobuf.util.Long,"should have loaded long.js after calling the factory function")}var a;n.amd=!0,vm.runInNewContext(o.data,a={define:n,window:{},require:void 0,console:console}),t.ok(a.window.protobuf,"should load the library as a global"),t.end()})})});