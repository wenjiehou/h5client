var tape=require("tape"),protobuf=require("..");tape.test("reflected fields",function(e){e.throws(function(){new protobuf.Field(1)},TypeError,"should throw if name is not a string"),e.throws(function(){new protobuf.Field("a",1.5)},TypeError,"should throw if id is not an integer"),e.throws(function(){new protobuf.Field("a",-5)},TypeError,"should throw if id is negative"),e.throws(function(){new protobuf.Field("a",1,5)},TypeError,"should throw if type is not a string"),e.throws(function(){new protobuf.Field("a",1,"uint32","optiona")},TypeError,"should throw if rule is specified but not a rule string"),e.throws(function(){new protobuf.Field("a",1,"uint32","optional",1)},TypeError,"should throw if extend is specified but not a string"),e.throws(function(){new protobuf.Field("a",1,"uint32","optional","B",!0)},TypeError,"should throw if options is specified but not an object"),e.throws(function(){var e=new protobuf.Field("a",1,"UnDeFiNeD");(new protobuf.Root).add(new protobuf.Type("A").add(e)),e.resolve()},Error,"should throw if type cannot be resolved");var o,t=new protobuf.Root,r=new protobuf.Field("a",1,"uint32",void 0,{});e.same(r.toJSON(),{rule:void 0,type:"uint32",id:1,extend:void 0,options:{}},"should export to JSON"),t.add(o=new protobuf.Type("Test").add(r=new protobuf.Field("a",1,"Enm",{default:"ONE"}))).add(new protobuf.Enum("Enm",{ONE:1,TWO:2})).resolveAll(),e.ok(r.resolvedType instanceof protobuf.Enum,"should resolve to an enum"),e.equal(r.typeDefault,1,"should recognize enum default values as strings"),r.resolved=!1,r.options.default=2,r.resolve(),e.equal(r.typeDefault,2,"should recognize enum default values as numbers"),o.add(r=new protobuf.Field("b",2,"bytes",{default:"dGVzdA=="})),r.resolve(),e.same(Array.prototype.slice.call(r.typeDefault),"test".split("").map(function(e){return e.charCodeAt(0)}),"should recognize bytes default values as base64 encoded strings"),r.resolved=!1,r.options.default="teststr",r.resolve(),e.same(Array.prototype.slice.call(r.typeDefault),"teststr".split("").map(function(e){return e.charCodeAt(0)}),"should recognize bytes default values as strings"),r.resolved=2,r.resolve(),e.equal(r.resolved,2,"should not resolve again if already resolved"),e.end()});