function expect(e,t,r,a){a||(a=Writer.create().constructor);var i=(new a)[e](t).finish();if(i.length!==r.length)return console.error("actual",Array.prototype.slice.call(i),"!= expected",r),!1;for(var o=0;o<r.length;++o)if(i[o]!==r[o])return console.error("actual",Array.prototype.slice.call(i),"!= expected",r),!1;for(var n=protobuf.util.newBuffer(20),s=0;s<i.length;++s)n[s]=i[s];return[i,n].forEach(function(r){var a=Reader.create(r)[e]();if("object"==typeof a){var i;if("string"==typeof t?(i=protobuf.util.newBuffer(protobuf.util.base64.length(t)),protobuf.util.base64.decode(t,i,0)):i=t,i.length!==a.length)return!1;for(var o=0;o<i.length;++o)if(a[o]!==i[o])return!1}else if(a!==t)return console.error("actual value",a,"!= expected",t),!1}),!(a!==protobuf.Writer&&!expect(e,t,r,Writer))||(console.error("in browser writer"),!1)}var tape=require("tape"),protobuf=require(".."),Writer=protobuf.Writer,Reader=protobuf.Reader;tape.test("writer & reader",function(e){e.throws(function(){Reader.create(1)},"should throw when creating a Reader from something else than a buffer"),e.doesNotThrow(function(){Reader.create([])},"should not throw when creating a Reader from an array (comp)");var t=[[0,[0]],[127,[127]],[128,[128,1]],[16383,[255,127]],[16384,[128,128,1]],[2097151,[255,255,127]],[2097152,[128,128,128,1]],[268435455,[255,255,255,127]],[268435456,[128,128,128,128,1]],[2147483647,[255,255,255,255,7]]];t.forEach(function(t){e.ok(expect("uint32",t[0]>>>0,t[1]),"should write "+t[0]+" as an unsigned varint of length "+t[1].length+" and read it back equally"),e.ok(expect("int32",0|t[0],t[1]),"should write "+t[0]+" as a signed varint of length "+t[1].length+" and read it back equally");var r=t[0]>>>1^-(1&t[0])|0;e.ok(expect("sint32",r,t[1]),"should write "+r+" as a signed zig-zag encoded varint of length "+t[1].length+" and read it back equally")}),e.ok(expect("uint32",-1>>>0,[255,255,255,255,15]),"should write -1 as an unsigned varint of length 5"),e.ok(expect("int32",-1,[255,255,255,255,255,255,255,255,255,1]),"should write -1 as a signed varint of length 10"),e.ok(expect("sint32",-1,[1]),"should write -1 as a signed zig-zag encoded varint of length 1"),"undefined"!=typeof Uint32Array&&t.forEach(function(t){var r=Writer.create().fixed32(t[0]).finish(),a=new Uint8Array(new Uint32Array([t[0]]).buffer);e.same(Array.prototype.slice.call(r),Array.prototype.slice.call(a),"should write "+t[0]+" as fixed 32 bits"),e.equal(Reader.create(r).fixed32(),t[0],"should read back "+t[0]+" equally");var i=0|t[0];r=Writer.create().sfixed32(i).finish(),a=new Uint8Array(new Uint32Array([t[0]]).buffer),e.same(Array.prototype.slice.call(r),Array.prototype.slice.call(a),"should write "+i+" as fixed 32 bits (signed)"),e.equal(Reader.create(r).sfixed32(),i,"should read back "+i+" equally")}),e.ok(expect("fixed32",4294967295,[255,255,255,255]),"should write 4294967295 as fixed 32 bits"),e.ok(expect("fixed32",4294967294,[254,255,255,255]),"should write 4294967294 as fixed 32 bits"),e.ok(expect("sfixed32",-1,[255,255,255,255]),"should write -1 as fixed 32 bits (signed)"),e.ok(expect("sfixed32",-2,[254,255,255,255]),"should write -2 as fixed 32 bits (signed)"),protobuf.util.merge(t,[[549755813887,[255,255,255,255,255,15]],[0x7fffffffffff,[255,255,255,255,255,255,31]]]),e.ok(protobuf.util.Long,"should use long.js"),t.forEach(function(t){var r=protobuf.util.Long.fromNumber(t[0],!1);e.ok(expect("uint64",r,t[1]),"should write "+r+" as an unsigned varint of length "+t[1].length+" and read it back equally"),e.ok(expect("int64",r,t[1]),"should write "+r+" as a signed varint of length "+t[1].length+" and read it back equally");var a=r.shru(1).xor(r.and(1).negate());e.ok(expect("sint64",a,t[1]),"should write "+a+" as a signed zig-zag encoded varint of length "+t[1].length+" and read it back equally")}),e.ok(expect("bool",!0,[1]),"should write true as a varint of length 1 and read it back equally"),e.ok(expect("bool",!1,[0]),"should write false as a varint of length 1 and read it back equally"),e.ok(expect("string","123",[3,49,50,51]),'should write "123" as a string prefixed with its length as a varint and read it back equally'),e.ok(expect("string","",[0]),'should write "" as a string prefixed with its length as a varint and read it back equally'),e.ok(expect("bytes",[1,2,3],[3,1,2,3]),"should write [1,2,3] as bytes prefixed with its length as a varint and read it back equally"),e.ok(expect("bytes",[],[0]),"should write [] as bytes prefixed with its length as a varint and read it back equally"),e.ok(expect("bytes","MTIz",[3,49,50,51]),"should write MTIz as bytes prefixed with its length as a varint and read it back equally"),e.test(e.name+" - should allow to skip",function(e){var t=Reader.create(Writer.create().uint32(1).double(.1).string("123").uint32(9).double(.1).uint32(4).uint32(4).float(.125).finish());t.skipType(0),e.equal(t.pos,1,"varints"),t.skipType(1),e.equal(t.pos,9,"fixed 64 bits"),t.skipType(2),e.equal(t.pos,13,"length delimited values"),t.skipType(3),e.equal(t.pos,23,"legacy groups"),t.skipType(3),e.equal(t.pos,24,"empty legacy groups"),t.skipType(5),e.equal(t.pos,28,"fixed 32 bits"),e.end()}),e.end()});