var tape=require("tape"),protobuf=require(".."),Root=protobuf.Root,def={nested:{},options:{javaPackage:"com.something"}};tape.test("reflected roots",function(o){o.test(o.name+" - construct",function(o){var t=Root.fromJSON(def);o.ok(t instanceof Root,"should construct from JSON");var e=Root.fromJSON(def,t);o.equal(e,t,"should construct from JSON and reuse specified Root"),o.end()}),"undefined"!=typeof Promise&&o.test(o.name+" - promise",function(o){var t=(new Root).load("tests/data/common.proto");o.ok(t instanceof Promise,"should return a Promise when loading without a callback"),t.then(function(){o.pass("should resolve"),o.end()}).catch(function(){o.fail("should not reject")})}),o.test(o.name+" - json",function(o){var t=new Root;o.plan(3),t.load("tests/data/common.json",function(e){if(e)return o.fail("should not return an error when loading JSON files: "+e.message);o.ok(t.lookupType("google.protobuf.Any"),"should load JSON files"),t.load("tests/data/common.json",function(e){o.same(t.files,["tests/data/common.json"],"should not attempt to load the same file twice"),o.notOk(e,"should not return an error when loading files twice"),o.end()})})}),o.test(o.name+" - weak",function(o){var t=new Root;o.plan(1),t.load(["tests/data/weak.proto"],function(t){o.notOk(t,"should ignore missing weak imports"),o.end()})}),o.test(o.name+" - missing",function(o){var t=new Root;o.plan(1),t.load("tests/data/NOTFOUND",function(t){o.ok(t,"should return an error when trying to load missing protos"),o.end()})}),o.test(o.name+" - skipped",function(o){var t=new Root;t.resolvePath=function(){return null},o.plan(1),t.load("tests/data/NOTFOUND2",function(t){o.notOk(t,"should skip files without error when resolvePath returns null"),o.end()})}),o.test(o.name+" - skipped import",function(o){var t=new Root;t.resolvePath=function(o,t){return/weak\.proto$/.test(t)?protobuf.util.path.resolve(o,t):null},o.plan(1),t.load("tests/data/weak.proto",function(t){o.notOk(t,"should skip files without error when resolvePath returns null"),o.end()})})});