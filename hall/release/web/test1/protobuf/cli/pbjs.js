"use strict";var path=require("path"),fs=require("fs"),pkg=require("./package.json"),util=require("./util");util.setup();var protobuf=require(util.pathToProtobufJs),minimist=require("minimist"),chalk=require("chalk"),glob=require("glob"),targets=util.requireAll("./targets");exports.main=function(e,t){function o(e){e.referenced=!0,e.fieldsArray&&e.fieldsArray.forEach(function(e){e.referenced=!0}),e.oneofsArray&&e.oneofsArray.forEach(function(e){e.referenced=!0}),e.extensionField&&(e.extensionField.parent.referenced=!0)}function r(){s(u,a,function(e,o){if(e){if(t)return t(e);throw e}try{return a.out?fs.writeFileSync(a.out,o,{encoding:"utf8"}):t||process.stdout.write(o,"utf8"),t?t(null,o):void 0}catch(e){if(t)return t(e);throw e}})}var n="eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins",a=minimist(e,{alias:{target:"t",out:"o",path:"p",wrap:"w",root:"r",lint:"l","force-long":"strict-long","force-message":"strict-message"},string:["target","out","path","wrap","root","lint"],boolean:["create","encode","decode","verify","convert","delimited","beautify","comments","es6","sparse","keep-case","force-long","force-message"],default:{target:"json",create:!0,encode:!0,decode:!0,verify:!0,convert:!0,delimited:!0,beautify:!0,comments:!0,es6:null,lint:n,"keep-case":!1,"force-long":!1,"force-message":!1}}),s=targets[a.target],i=a._,c="string"==typeof a.path?[a.path]:a.path||[];if(Object.keys(a).forEach(function(e){var t=e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()});t!==e&&(a[t]=a[e])}),c.push(path.relative(process.cwd(),path.join(__dirname,".."))||"."),!i.length){var f=Object.keys(targets).filter(function(e){return!targets[e].private}).map(function(e){return"                  "+util.pad(e,14,!0)+targets[e].description});return t?t(Error("usage")):process.stderr.write(["protobuf.js v"+pkg.version+" CLI for JavaScript","",chalk.bold.white("Translates between file formats and generates static code."),"","  -t, --target     Specifies the target format. Also accepts a path to require a custom target.","",f.join("\n"),"","  -p, --path       Adds a directory to the include path.","","  -o, --out        Saves to a file instead of writing to stdout.","","  --sparse         Exports only those types referenced from a main file (experimental).","",chalk.bold.gray("   Module targets only:"),"","  -w, --wrap       Specifies the wrapper to use. Also accepts a path to require a custom wrapper.","","                   default   Default wrapper supporting both CommonJS and AMD","                   commonjs  CommonJS wrapper","                   amd       AMD wrapper","                   es6       ES6 wrapper (implies --es6)","","  -r, --root       Specifies an alternative protobuf.roots name.","","  -l, --lint       Linter configuration. Defaults to protobuf.js-compatible rules:","","                   "+n,"","  --es6            Enables ES6 syntax (const/let instead of var)","",chalk.bold.gray("   Proto sources only:"),"","  --keep-case      Keeps field casing instead of converting to camel case.","",chalk.bold.gray("   Static targets only:"),"","  --no-create      Does not generate create functions used for reflection compatibility.","  --no-encode      Does not generate encode functions.","  --no-decode      Does not generate decode functions.","  --no-verify      Does not generate verify functions.","  --no-convert     Does not generate convert functions like from/toObject","  --no-delimited   Does not generate delimited encode/decode functions.","  --no-beautify    Does not beautify generated code.","  --no-comments    Does not output any JSDoc comments.","","  --force-long     Enfores the use of 'Long' for s-/u-/int64 and s-/fixed64 fields.","  --force-message  Enfores the use of message instances instead of plain objects.","","usage: "+chalk.bold.green("pbjs")+" [options] file1.proto file2.json ..."+chalk.gray("  (or)  ")+"other | "+chalk.bold.green("pbjs")+" [options] -",""].join("\n")),1}"boolean"==typeof a["strict-long"]&&(a["force-long"]=a["strict-long"]);for(var l=0;l<i.length;)if(glob.hasMagic(i[l])){var p=glob.sync(i[l]);Array.prototype.splice.apply(i,[l,1].concat(p)),l+=p.length}else++l;s||(s=require(path.resolve(process.cwd(),a.target)));var u=new protobuf.Root,d=[];u.resolvePath=function(e,t){var o=protobuf.util.path.normalize(e),r=protobuf.util.path.normalize(t);o||d.push(r);var n=protobuf.util.path.resolve(o,r,!0),a=n.lastIndexOf("google/protobuf/");if(a>-1){var s=n.substring(a);s in protobuf.common&&(n=s)}if(fs.existsSync(n))return n;for(var i=0;i<c.length;++i){var f=protobuf.util.path.resolve(c[i]+"/",t);if(fs.existsSync(f))return f}return n},("es6"===a.wrap||a.es6)&&(a.wrap="es6",a.es6=!0);var g={keepCase:a["keep-case"]||!1};if(1===i.length&&"-"===i[0]){var m=[];process.stdin.on("data",function(e){m.push(e)}),process.stdin.on("end",function(){var e=Buffer.concat(m).toString("utf8");try{if("{"!==e.charAt(0))protobuf.parse.filename="-",protobuf.parse(e,u,g);else{var o=JSON.parse(e);u.setOptions(o.options).addJSON(o)}r()}catch(e){if(t)return void t(e);throw e}})}else try{u.loadSync(i,g).resolveAll(),a.sparse&&function(e){util.traverse(e,function(e){e.filename&&d.indexOf(e.filename)>-1&&util.traverseResolved(e,o)}),util.traverse(e,function(e){var t=e.parent;if(t&&!e.referenced)if(e instanceof protobuf.Namespace){var o=!1;if(util.traverse(e,function(e){e.referenced&&(o=!0)}),o){if(e instanceof protobuf.Type||e instanceof protobuf.Service){var r=new protobuf.Namespace(e.name,e.options);r.nested=e.nested,t.add(r)}}else t.remove(e)}else e instanceof protobuf.Namespace||t.remove(e)}),e.resolveAll()}(u),r()}catch(e){if(t)return void t(e);throw e}};