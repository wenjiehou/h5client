var tape=require("tape"),asPromise=require("..");tape.test("aspromise",function(e){e.test(this.name+" - resolve",function(e){var t={};asPromise(function(o,n,i){e.equal(this,t,"function should be called with this = ctx"),e.equal(o,1,"function should be called with arg1 = 1"),e.equal(n,2,"function should be called with arg2 = 2"),i(null,n)},t,1,2).then(function(t){e.equal(t,2,"promise should be resolved with arg2 = 2"),e.end()}).catch(function(t){e.fail("promise should not be rejected ("+t+")")})}),e.test(this.name+" - reject",function(e){var t={};asPromise(function(o,n,i){e.equal(this,t,"function should be called with this = ctx"),e.equal(o,1,"function should be called with arg1 = 1"),e.equal(n,2,"function should be called with arg2 = 2"),i(o)},t,1,2).then(function(){e.fail("promise should not be resolved")}).catch(function(t){e.equal(t,1,"promise should be rejected with err = 1"),e.end()})}),e.test(this.name+" - resolve twice",function(e){var t={},o=0;asPromise(function(o,n,i){e.equal(this,t,"function should be called with this = ctx"),e.equal(o,1,"function should be called with arg1 = 1"),e.equal(n,2,"function should be called with arg2 = 2"),i(null,n),i(null,o)},t,1,2).then(function(t){e.equal(t,2,"promise should be resolved with arg2 = 2"),++o>1&&e.fail("promise should not be resolved twice"),e.end()}).catch(function(t){e.fail("promise should not be rejected ("+t+")")})}),e.test(this.name+" - reject twice",function(e){var t={},o=0;asPromise(function(o,n,i){e.equal(this,t,"function should be called with this = ctx"),e.equal(o,1,"function should be called with arg1 = 1"),e.equal(n,2,"function should be called with arg2 = 2"),i(o),i(n)},t,1,2).then(function(){e.fail("promise should not be resolved")}).catch(function(t){e.equal(t,1,"promise should be rejected with err = 1"),++o>1&&e.fail("promise should not be rejected twice"),e.end()})}),e.test(this.name+" - reject error",function(e){asPromise(function(t){throw e.ok(1===arguments.length&&"function"==typeof t,"function should be called with just a callback"),3},null).then(function(){e.fail("promise should not be resolved")}).catch(function(t){e.equal(t,3,"promise should be rejected with err = 3"),e.end()})}),e.test(this.name+" - reject and error",function(e){var t=0;asPromise(function(e){throw e(3),4},null).then(function(){e.fail("promise should not be resolved")}).catch(function(o){e.equal(o,3,"promise should be rejected with err = 3"),++t>1&&e.fail("promise should not be rejected twice"),e.end()})})});